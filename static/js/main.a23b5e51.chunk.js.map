{"version":3,"sources":["App.js","serviceWorker.js","index.js","utils.js","components/Calculator.js","components/FormulaPreview.js"],"names":["App","className","Calculator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","REG_EXP","INPUT","OPERATOR","CONSTANT","breakVariable","variable","replace","split","placeholder","key","CalculatorWrapper","styled","section","useState","formula","setFormula","variables","setVariables","result","setResult","inputData","setInputData","useEffect","tokens","forEach","token","push","extractVariables","setInput","value","prev","calculate","console","log","expression","variableValue","eval","id","onChange","target","map","i","toUpperCase","style","visibility","type","ghost","onClick","FormulaPreview","index","output"],"mappings":"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","file":"static/js/main.a23b5e51.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable no-useless-escape */\nconst REG_EXP = {\n  INPUT: /\\$\\{\\w+:\\w+\\}/gi,\n  OPERATOR: /[+\\-*\\/]/gi,\n  CONSTANT: /\\d/gi\n};\n\nconst breakVariable = variable => {\n  const parsedVariable = variable.replace(/[\\$\\{\\}]/g, \"\");\n  const [placeholder, key] = parsedVariable.split(\":\");\n  return { placeholder, key };\n};\n\nexport { REG_EXP, breakVariable };\n","/* eslint-disable no-eval */\n/* eslint-disable no-useless-escape */\n/* eslint-disable no-template-curly-in-string */\nimport React, { useState, useEffect } from \"react\";\nimport { Input, Button } from \"antd\";\nimport styled from \"styled-components\";\n\nimport { REG_EXP, breakVariable } from \"../utils\";\nimport FormulaPreview from \"./FormulaPreview\";\n\nconst CalculatorWrapper = styled.section`\n  width: 500px;\n  // margin: 0 auto;\n  top: 50%;\n  left: 50%;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  background: #f9f9f9;\n  border-radius: 10px;\n  padding: 30px 15px;\n  h3.formula,\n  h3.variables,\n  h3.preview,\n  .formula-result {\n    margin-top: 25px;\n    text-align: center;\n    text-transform: uppercase;\n    color: grey;\n    font-weight: bold;\n  }\n  .formula-input {\n    width: 300px;\n    margin: 0 auto;\n    display: block;\n  }\n  .variable-input {\n    width: 40%;\n    margin: 10px auto;\n    span {\n      margin-right: 5px;\n      text-align: center;\n      text-transform: uppercase;\n      color: grey;\n      font-size: 0.8rem;\n    }\n    input {\n      width: 70px;\n    }\n  }\n  .formula-preview {\n    display: block;\n    text-transform: uppercase;\n    .variable {\n      padding: 1px 3px;\n      font-size: 0.8rem;\n      border-radius: 5px;\n      background: tomato;\n    }\n    .operator {\n      padding: 1px 3px;\n    }\n    .constant {\n      padding: 1px 3px;\n    }\n  }\n`;\n\nconst Calculator = () => {\n  const [formula, setFormula] = useState(\"${var1:key1} * 100\");\n  const [variables, setVariables] = useState([]);\n  const [result, setResult] = useState(null);\n  const [inputData, setInputData] = useState({});\n\n  useEffect(() => {\n    const extractVariables = () => {\n      const tokens = formula.split(\" \");\n      const result = [];\n      tokens.forEach(token => {\n        if (token.match(REG_EXP.INPUT)) {\n          const { key, placeholder } = breakVariable(token);\n          result.push({ key, placeholder });\n        }\n      });\n      setVariables(result);\n    };\n    extractVariables();\n  }, [formula]);\n\n  const setInput = (key, value) =>\n    setInputData(prev => ({ ...prev, [key]: value }));\n\n  const calculate = () => {\n    const variables = formula.match(REG_EXP.INPUT);\n    console.log(\"matched variables:\", variables);\n    let expression = formula;\n    variables.forEach(variable => {\n      const { key } = breakVariable(variable);\n      const variableValue = inputData[key];\n      expression = expression.replace(variable, variableValue);\n    });\n    console.log(\"final expression:\", expression);\n    setResult(eval(expression));\n  };\n\n  return (\n    <CalculatorWrapper id=\"calculator\">\n      <h3 className=\"formula\">Formula</h3>\n      <Input\n        className=\"formula-input\"\n        value={formula}\n        onChange={({ target: { value } }) => setFormula(value)}\n      />\n      <h3 className=\"variables\">Variables</h3>\n      {variables.map(({ key, placeholder }, i) => (\n        <div className=\"variable-input\" key={i}>\n          <span>{placeholder}</span>\n          <Input\n            placeholder={placeholder.toUpperCase()}\n            value={inputData[key]}\n            onChange={({ target: { value } }) => setInput(key, value)}\n          />\n        </div>\n      ))}\n      <h3 className=\"preview\">Formula Preview</h3>\n      <span className=\"formula-preview\">\n        {<FormulaPreview formula={formula} />}\n      </span>\n      <h3\n        style={{ visibility: `${!!result ? \"visible\" : \"hidden\"}` }}\n        className=\"formula-result\"\n      >\n        Result <div>{result}</div>\n      </h3>\n      <br />\n      <Button type=\"danger\" ghost onClick={calculate}>\n        Calculate\n      </Button>\n    </CalculatorWrapper>\n  );\n};\n\nexport default Calculator;\n","import React, { Fragment } from \"react\";\n\nimport { REG_EXP, breakVariable } from \"../utils\";\n\nconst FormulaPreview = ({ formula }) => {\n  const tokens = formula.split(\" \");\n  return (\n    <Fragment>\n      {tokens.map((token, index) => {\n        let className,\n          output = token;\n\n        if (token.match(REG_EXP.INPUT)) {\n          const { placeholder } = breakVariable(token);\n          className = \"variable\";\n          output = placeholder;\n        } else if (token.match(REG_EXP.OPERATOR)) className = \"operator\";\n        else if (token.match(REG_EXP.CONSTANT)) className = \"constant\";\n\n        return (\n          <span key={index} className={className}>\n            {output}\n          </span>\n        );\n      })}\n    </Fragment>\n  );\n};\nexport default FormulaPreview;\n"],"sourceRoot":""}